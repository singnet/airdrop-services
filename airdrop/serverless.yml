service: airdrop-services

provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  layers: ${file(./config.${self:provider.stage}.json):AirDropLayer}
  timeout: 30
  stage: ${opt:stage,'dev'}
  region: ${file(./config.${self:provider.stage}.json):REGION}
  role: ${file(./config.${self:provider.stage}.json):ROLE}
  vpc:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.json):SG1}
      - ${file(./config.${self:provider.stage}.json):SG2}
    subnetIds:
      - ${file(./config.${self:provider.stage}.json):VPC1}
      - ${file(./config.${self:provider.stage}.json):VPC2}
  deploymentBucket:
    name: snet-serverless-artifacts     # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256        # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: airdrop-services
  deploymentPrefix: serverless

custom:
  defaultQueueRetry: 5
  defaultMessageRetentionPeriod: 14400
  prune:
    automatic: true
    includeLayers: true
    number: 3

plugins:
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation
  - serverless-python-requirements
  - serverless-latest-layer-version

package:
  exclude:
    - airdrop/testcases/**
    - airdrop/package.json
    - airdrop/package-lock.json
    - airdrop/serverless.yml
    - airdrop/requirements.txt
    - airdrop/documentation/**
    - .circleci/**
    - .serverless/**
    - node_modules/**
    - package.json
    - package-lock.json
    - .gitignore
    - serverless.yml
    - README.md
    - LICENSE
    - config.rt-v2.json

resources:
  Resources:
    cardanoEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-cardano-event-consumer
        VisibilityTimeout: 120
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt cardanoEventConsumerDLQQueue.Arn
          maxReceiveCount: 15

    cardanoEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: cardanoEventConsumerQueue
          Statement:
            - Sid: AllowCardanoEventListener
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt cardanoEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}
        Queues:
          - !Ref cardanoEventConsumerQueue

    cardanoEventListenerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt cardanoEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}

    cardanoEventConsumerDLQQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-cardano-event-consumer-dlq
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: 604800

    cardanoEventConsumerDLQQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: cardanoEventConsumerDLQQueue
          Statement:
            - Sid: Allow-SQS-SendMessage
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt cardanoEventConsumerDLQQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt cardanoEventConsumerQueue.Arn
        Queues:
          - !Ref cardanoEventConsumerDLQQueue

functions:

  process_loyalty_reward:
    timeout: 600
    handler: airdrop/job/eligibility.process_loyalty_airdrop_reward_eligibility

  process_eligibility:
    timeout: 600
    handler: airdrop/job/eligibility.process_eligibility
    events:
      - schedule:
          rate: cron(0 11 * * ? *)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-eligibility-processor
          enabled: true

  process_rejuve_reward:
    timeout: 600
    handler: airdrop/job/eligibility.process_rejuve_airdrop_reward

  get_airdrop_schedules:
    handler: airdrop/application/handlers/airdrop_handlers.get_airdrop_schedules
    events:
      - http:
          path: /airdrop-schedule/{airdrop_id}
          method: get
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  user_registration:
    handler: airdrop/application/handlers/airdrop_handlers.user_registration
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    events:
      - http:
          path: /airdrop/registration
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  user_registration_update:
    handler: airdrop/application/handlers/airdrop_handlers.user_registration_update
    events:
      - http:
          path: /airdrop/registration/update
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  address_eligibility:
    handler: airdrop/application/handlers/airdrop_handlers.address_eligibility
    events:
      - http:
          path: /airdrop/address-eligibility
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  user_eligibility:
    handler: airdrop/application/handlers/airdrop_handlers.user_eligibility
    events:
      - http:
          path: /airdrop/user-eligibility
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_window_claims:
    handler: airdrop/application/handlers/airdrop_handlers.occam_airdrop_window_claim
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    events:
      - http:
          path: /airdrop/claim
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_window_claim:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    events:
      - http:
          path: /airdrop/secured-claim
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_window_claim_status:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim_status
    events:
      - http:
          path: /airdrop/claim-txn
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_history:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim_history
    events:
      - http:
          path: /airdrop-history
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_user_notifications:
    handler: airdrop/application/handlers/airdrop_handlers.user_notifications
    events:
      - http:
          path: /airdrop-notifications
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_window_stake_details:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_stake_details
    events:
      - http:
          path: /airdrop-window-stake-details
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  airdrop_event_listener:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_event_consumer

  airdrop_txn_watcher:
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_txn_watcher
    events:
      - schedule:
          rate: rate(2 minutes)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-event_txn_watcher
          enabled: ${file(./config.${self:provider.stage}.json):airdrop_cron_status}

  deposit_event_consumer:
    handler: airdrop/application/handlers/consumer_handler.deposit_event_consumer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - cardanoEventConsumerQueue
              - Arn
          batchSize: 1

  cardano-airdrop-transfer-claim-service:
    handler: airdrop/application/handlers/airdrop_handlers.cardano_airdrop_transfer_claim_service
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):CardanoServiceSG}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(1 hour)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-loyalty-airdrop-transfer-claim
          enabled: ${file(./config.${self:provider.stage}.json):loyalty_airdrop_transfer_claim_cron_status}
          input:
            airdrop_id: ${file(./config.${self:provider.stage}.json):LoyaltyAirdropId}
      - schedule:
          rate: rate(1 hour)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-rejuve-airdrop-transfer-claim
          enabled: ${file(./config.${self:provider.stage}.json):rejuve_airdrop_transfer_claim_cron_status}
          input:
            airdrop_id: ${file(./config.${self:provider.stage}.json):RejuveAirdropId}
    timeout: 300

  cardano-airdrop-update-claim-tx-status:
    handler: airdrop/application/handlers/airdrop_handlers.update_user_claim_transaction_status_post_block_confirmation
    events:
      - schedule:
          rate: rate(5 minutes)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-loyalty-airdrop-update-claim-tx-status
          enabled: ${file(./config.${self:provider.stage}.json):loyalty_airdrop_update_claim_tx_cron_status}
          input:
            airdrop_id: ${file(./config.${self:provider.stage}.json):LoyaltyAirdropId}
      - schedule:
          rate: rate(5 minutes)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-rejuve-airdrop-update-claim-tx-status
          enabled: ${file(./config.${self:provider.stage}.json):rejuve_airdrop_update_claim_tx_cron_status}
          input:
            airdrop_id: ${file(./config.${self:provider.stage}.json):RejuveAirdropId}

  check_trezor_registrations:
    handler: airdrop/application/handlers/airdrop_handlers.check_trezor_registrations
    events:
      - schedule: cron(0/2 * * * ? *)