service: airdrop-services
frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.7
  lambdaHashingVersion: 20201221
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: airdrop-services
  deploymentPrefix: serverless
  tracing: true

custom:
  defaultQueueRetry: 5
  defaultMessageRetentionPeriod: 14400
  pythonRequirements:
    fileName: airdrop/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 3

plugins:
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-latest-layer-version
  - serverless-aws-documentation
  - serverless-python-requirements

documentation:
  models:
    - name: "ErrorMessage"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/error.json)}
    - name: "UserNotificationInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/user_notification.json):UserNotificationInput}
    - name: "UserNotificationOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/user_notification.json):UserNotificationOutput}
    - name: "AirdropScheduleInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_schedule.json):AirdropScheduleInput}
    - name: "AirdropScheduleOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_schedule.json):AirdropScheduleOutput}
    - name: "AirdropRegistrationInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_registration.json):AirdropRegistrationInput}
    - name: "AirdropRegistrationOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_registration.json):AirdropRegistrationOutput}
    - name: "AirdropClaimStatusInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_claim_status.json):AirdropClaimStatusInput}
    - name: "AirdropClaimStatusOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_claim_status.json):AirdropClaimStatusOutput}
    - name: "AirdropClaimInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_window_claim.json):AirdropClaimInput}
    - name: "AirdropClaimOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_window_claim.json):AirdropClaimOutput}
    - name: "AirdropClaimHistoryInput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_claim_history.json):AirdropClaimHistoryInput}
    - name: "AirdropClaimHistoryOutput"
      contentType: "application/json"
      schema: ${file(airdrop/documentation/models/airdrop_claim_history.json):AirdropClaimHistoryOutput}

package:
  exclude:
    - airdrop/testcases/**
    - airdrop/package.json
    - airdrop/package-lock.json
    - airdrop/serverless.yml
    - airdrop/requirements.txt
    - airdrop/documentation/**
    - .circleci/**
    - .serverless/**
    - node_modules/**
    - package.json
    - package-lock.json
    - .gitignore
    - serverless.yml
    - README.md
    - LICENSE
    - config.rt-v2.json

resources:
  Resources:
   airdropEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-airdrop-event-consumer
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt airdropEventConsumerDLQQueue.Arn
          maxReceiveCount: 15

    airdropEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: airdropEventConsumerQueue
          Statement:
            - Sid: AllowCardanoEventListener
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt airdropEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}
        Queues:
          - !Ref airdropEventConsumerQueue

    cardanoEventListenerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt airdropEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}

    airdropEventConsumerDLQQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-airdrop-event-consumer-dlq
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: 604800

    airdropEventConsumerDLQQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: airdropEventConsumerDLQQueue
          Statement:
            - Sid: Allow-SQS-SendMessage
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt airdropEventConsumerDLQQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt airdropEventConsumerQueue.Arn
        Queues:
          - !Ref airdropEventConsumerDLQQueue


functions:
  process_eligibility:
    timeout: 600
    warmup: false
    handler: airdrop/job/eligibility.process_eligibility
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonCode_Layer}
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib_Layer}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: cron(0 11 * * ? *)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-eligibility-processor
          enabled: true

  get_airdrop_schedules:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.get_airdrop_schedules
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop-schedule/{airdrop_id}
          method: get
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get Airdrop schedule"
            description: "Get Airdrop schedule"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropScheduleInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdropschedule Data"
                  "application/json": "AirdropScheduleOutput"
                responseModels:
                  "application/json": "AirdropScheduleOutput"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  user_registration:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.user_registration
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop/registration
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop user registration"
            description: "Airdrop user registration"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropRegistrationInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "AirdropRegistration Data"
                  "application/json": "AirdropRegistrationOutput"
                responseModels:
                  "application/json": "AirdropRegistrationOutput"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  user_eligibility:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.user_eligibility
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop/user-eligibility
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop user registration"
            description: "Airdrop user registration"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropRegistration"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "AirdropRegistration Data"
                  "application/json": "AirdropRegistration"
                responseModels:
                  "application/json": "AirdropRegistration"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_window_claims:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.occam_airdrop_window_claim
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop/claim
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop window claims"
            description: "Airdrop window claims"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropWindowClaim"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdrop Window Claim get signed signature from the service"
                  "application/json": "AirdropWindowClaim"
                responseModels:
                  "application/json": "AirdropWindowClaim"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"

  airdrop_window_claim:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop/secured-claim
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop window secured claims"
            description: "Airdrop window secured claims"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropWindowClaim"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "For Airdrop Window Claim get signed signature from the back end service"
                  "application/json": "AirdropWindowClaim"
                responseModels:
                  "application/json": "AirdropWindowClaim"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_window_claim_status:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim_status
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop/claim-txn
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop window claim transaction status"
            description: "Airdrop window claim transaction status"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropClaimStatus"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdrop Window claim txn status update"
                  "application/json": "AirdropClaimStatus"
                responseModels:
                  "application/json": "AirdropClaimStatus"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_history:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_claim_history
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop-history
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop window claim history"
            description: "Airdrop window claim history"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropClaimHistory"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdrop Window claim history"
                  "application/json": "AirdropClaimHistory"
                responseModels:
                  "application/json": "AirdropClaimHistory"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_user_notifications:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.user_notifications
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop-notifications
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop notification subscription"
            description: "Airdrop notification subscription"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "UserNotificationInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdrop notifications"
                  "application/json": "UserNotificationInput"
                responseModels:
                  "application/json": "UserNotificationOutput"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_window_stake_details:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_stake_details
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop-window-stake-details
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop window claim details"
            description: "Airdrop window claim details"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropScheduleInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdrop notifications"
                  "application/json": "AirdropScheduleOutput"
                responseModels:
                  "application/json": "AirdropScheduleOutput"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_event_listener:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_event_consumer
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
  airdrop_txn_watcher:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_txn_watcher
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(2 minutes)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-event_txn_watcher
          enabled: ${file(./config.${self:provider.stage}.json):airdrop_cron_status}

  deposit_event_consumer:
    handler: airdrop/application/handlers/consumer_handlers.deposit_event_consumer
    layers:
      - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
      - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - airdropEventConsumerQueue
              - Arn
          batchSize: 1